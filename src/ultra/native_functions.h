#pragma once

namespace ultra {


// Sequential pairs of native function declaration and corresponding 
// cpu dispatcher function if exists otherwise "NO_NS::NO_FUNCTION"
std::vector<std::string> n_functions = {
"_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cast_Char(Tensor self, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cast_Double(Tensor self, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cast_Float(Tensor self, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cast_Int(Tensor self, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cast_Long(Tensor self, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cast_Short(Tensor self, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cast_Half(Tensor self, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_backward(Tensor self, Tensor[] inputs, Tensor? gradient=None, bool? retain_graph=None, bool create_graph=False) -> ()",
"NO_NS::NO_FUNCTION",
"set_data(Tensor(a!) self, Tensor new_data) -> ()",
"NO_NS::NO_FUNCTION",
"data(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"is_leaf(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"output_nr(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"_version(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"requires_grad_(Tensor(a!) self, bool requires_grad=True) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"retain_grad(Tensor(a!) self) -> ()",
"NO_NS::NO_FUNCTION",
"_fw_primal(Tensor(a) self, int level) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_make_dual(Tensor(a) primal, Tensor tangent, int level) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_unpack_dual(Tensor(a) dual, int level) -> (Tensor(a) primal, Tensor tangent)",
"NO_NS::NO_FUNCTION",
"rename_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"rename(Tensor(a) self, Dimname[]? names) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"align_to(Tensor(a) self, Dimname[] names) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"align_to.ellipsis_idx(Tensor(a) self, Dimname[] order, int ellipsis_idx) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"align_as(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"align_tensors(Tensor[] tensors) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"_assert_async(Tensor self) -> ()",
"_assert_async_cpu",
"refine_names(Tensor(a) self, Dimname[] names) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_use_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank) -> bool",
"NO_NS::NO_FUNCTION",
"_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)",
"NoCheck  # log_probs is expected to be on CUDA while targets is expected to be on CPU",
"_use_cudnn_rnn_flatten_weight() -> bool",
"NO_NS::NO_FUNCTION",
"_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, bool bidirectional) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])",
"NO_NS::NO_FUNCTION",
"_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_debug_has_internal_overlap(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_masked_scale(Tensor self, Tensor mask, float scale) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor",
"NO_NS::NO_FUNCTION",
"_shape_as_tensor(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"dropout(Tensor input, float p, bool train) -> Tensor",
"NO_NS::NO_FUNCTION",
"dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"feature_dropout(Tensor input, float p, bool train) -> Tensor",
"NO_NS::NO_FUNCTION",
"feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"alpha_dropout(Tensor input, float p, bool train) -> Tensor",
"NO_NS::NO_FUNCTION",
"alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor",
"NO_NS::NO_FUNCTION",
"feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"abs(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"abs_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"abs_out",
"absolute(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"absolute_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"absolute.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"angle(Tensor self) -> Tensor",
"angle",
"angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"angle_out",
"view_as_real(Tensor(a) self) -> Tensor(a)",
"view_as_real",
"view_as_complex(Tensor(a) self) -> Tensor(a)",
"view_as_complex",
"sgn(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"sgn_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sgn.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"sgn_out",
"real(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"imag(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"conj(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"conj.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"conj_out",
"_conj(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"acos(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"acos_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"acos_out",
"arccos(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"arccos_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"arccos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor",
"NO_NS::NO_FUNCTION",
"adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor",
"NO_NS::NO_FUNCTION",
"adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"add_out",
"_add_relu.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor",
"add_relu",
"_add_relu_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)",
"add_relu_",
"_add_relu.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"add_relu_out",
"add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"addmv_out_cpu",
"addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor",
"addr",
"addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"addr_out",
"affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor",
"NO_NS::NO_FUNCTION",
"affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor",
"NO_NS::NO_FUNCTION",
"all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor",
"all",
"all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"all_out",
"all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool",
"NO_NS::NO_FUNCTION",
"any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor",
"any",
"any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"any_out",
"any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)",
"arange_cpu_out",
"_dim_arange(Tensor like, int dim) -> Tensor",
"NO_NS::NO_FUNCTION",
"argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor",
"argmax",
"argmax.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"argmax_out",
"argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor",
"argmin",
"argmin.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"argmin_out",
"acosh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"acosh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"acosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"acosh_out",
"arccosh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"arccosh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"arccosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"asinh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"asinh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"asinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"asinh_out",
"arcsinh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"arcsinh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"arcsinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"atanh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"atanh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"atanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"atanh_out",
"arctanh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"arctanh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"arctanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)",
"as_strided_tensorimpl",
"as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"asin(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"asin_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"asin_out",
"arcsin(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"arcsin_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"arcsin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"atan(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"atan_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"atan_out",
"arctan(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"arctan_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"arctan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"atleast_1d(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"atleast_1d.Sequence(Tensor[] tensors) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"atleast_2d(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"atleast_2d.Sequence(Tensor[] tensors) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"atleast_3d(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"atleast_3d.Sequence(Tensor[] tensors) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor",
"baddbmm_cpu",
"baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)",
"baddbmm__cpu",
"_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"baddbmm_out_cpu",
"bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantized_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> Tensor",
"NO_NS::NO_FUNCTION",
"_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)",
"NO_NS::NO_FUNCTION",
"_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"bernoulli(Tensor self, *, Generator? generator=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)",
"bernoulli_out",
"bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)",
"bernoulli_",
"bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)",
"bernoulli_",
"bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor",
"NO_NS::NO_FUNCTION",
"binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor",
"binary_cross_entropy_cpu",
"binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)",
"binary_cross_entropy_out_cpu",
"binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor",
"binary_cross_entropy_backward_cpu",
"binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)",
"binary_cross_entropy_backward_out_cpu",
"binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor",
"_bincount_cpu",
"bitwise_not(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"bitwise_not_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"bitwise_not_out",
"copysign.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"copysign_out",
"copysign.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"copysign_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"copysign.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"copysign_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"copysign.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"logical_not(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"logical_not_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"logical_not_out",
"logical_xor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"logical_xor_out",
"logical_and(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"logical_and_out",
"logical_or(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"logical_or_out",
"blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"bmm(Tensor self, Tensor mat2) -> Tensor",
"bmm_cpu",
"_bmm(Tensor self, Tensor mat2, *, bool deterministic=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)",
"bmm_out_cpu",
"_bmm.out(Tensor self, Tensor mat2, *, bool deterministic=False, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"broadcast_tensors(Tensor[] tensors) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"broadcast_to(Tensor(a) self, int[] size) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"cat(Tensor[] tensors, int dim=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)",
"_cat_out_cpu",
"cat.names(Tensor[] tensors, Dimname dim) -> Tensor",
"NO_NS::NO_FUNCTION",
"cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"block_diag(Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"ceil(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"ceil_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"ceil_out",
"chain_matmul(Tensor[] matrices) -> Tensor",
"NO_NS::NO_FUNCTION",
"chain_matmul.out(Tensor[] matrices, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"unsafe_chunk(Tensor self, int chunks, int dim=0) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"tensor_split.sections(Tensor(a) self, int sections, int dim=0) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"tensor_split.indices(Tensor(a) self, int[] indices, int dim=0) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"tensor_split.tensor_indices_or_sections(Tensor(a) self, Tensor tensor_indices_or_sections, int dim=0) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor",
"clamp",
"clamp.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> Tensor",
"clamp",
"clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clamp_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)",
"clamp_out",
"clamp.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> Tensor(a!)",
"clamp_out",
"clamp_max(Tensor self, Scalar max) -> Tensor",
"NO_NS::NO_FUNCTION",
"clamp_max.Tensor(Tensor self, Tensor max) -> Tensor",
"NO_NS::NO_FUNCTION",
"clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clamp_max_.Tensor(Tensor(a!) self, Tensor max) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)",
"clamp_max_out",
"clamp_max.Tensor_out(Tensor self, Tensor max, *, Tensor(a!) out) -> Tensor(a!)",
"clamp_max_out",
"clamp_min(Tensor self, Scalar min) -> Tensor",
"NO_NS::NO_FUNCTION",
"clamp_min.Tensor(Tensor self, Tensor min) -> Tensor",
"NO_NS::NO_FUNCTION",
"clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clamp_min_.Tensor(Tensor(a!) self, Tensor min) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)",
"clamp_min_out",
"clamp_min.Tensor_out(Tensor self, Tensor min, *, Tensor(a!) out) -> Tensor(a!)",
"clamp_min_out",
"clip(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"clip.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"clip_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clip_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clip.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clip.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cudnn_is_acceptable(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"complex(Tensor real, Tensor imag) -> Tensor",
"NO_NS::NO_FUNCTION",
"complex.out(Tensor real, Tensor imag, *, Tensor(a!) out) -> Tensor(a!)",
"complex_out",
"polar(Tensor abs, Tensor angle) -> Tensor",
"NO_NS::NO_FUNCTION",
"polar.out(Tensor abs, Tensor angle, *, Tensor(a!) out) -> Tensor(a!)",
"polar_out",
"constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"contiguous(Tensor(a) self, *, MemoryFormat memory_format=contiguous_format) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor",
"NO_NS::NO_FUNCTION",
"convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor",
"NO_NS::NO_FUNCTION",
"convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)",
"NO_NS::NO_FUNCTION",
"_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) -> Tensor",
"NO_NS::NO_FUNCTION",
"_convolution.deprecated(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor",
"NO_NS::NO_FUNCTION",
"_convolution_mode(Tensor input, Tensor weight, Tensor? bias, int[] stride, str padding, int[] dilation, int groups) -> Tensor",
"NO_NS::NO_FUNCTION",
"_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor",
"NO_NS::NO_FUNCTION",
"_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv1d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, str padding=\"valid\", int[1] dilation=1, int groups=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv2d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, str padding=\"valid\", int[2] dilation=1, int groups=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv3d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, str padding=\"valid\", int[3] dilation=1, int groups=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"cos(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"cos_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"cos_out",
"cosh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"cosh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"cosh_out",
"cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"count_nonzero.dim_IntList(Tensor self, int[] dim) -> Tensor",
"count_nonzero",
"count_nonzero(Tensor self, int? dim=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> Tensor grid",
"NO_NS::NO_FUNCTION",
"cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> Tensor grad_theta",
"NO_NS::NO_FUNCTION",
"cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon, Tensor reserveSpace) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"cudnn_convolution.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution.deprecated2(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32, bool[2] output_mask) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_transpose.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_transpose.deprecated2(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32, bool[2] output_mask) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_relu(Tensor self, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_convolution_add_relu(Tensor self, Tensor weight, Tensor z, Scalar? alpha, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor",
"NO_NS::NO_FUNCTION",
"cudnn_grid_sampler(Tensor self, Tensor grid) -> Tensor output",
"NO_NS::NO_FUNCTION",
"cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)",
"NO_NS::NO_FUNCTION",
"cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"cummax.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"cummax.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"_cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()",
"cummax_helper_cpu",
"cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"cummin.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"cummin.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"_cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()",
"cummin_helper_cpu",
"cummaxmin_backward(Tensor grad, Tensor input, Tensor indices, int dim) -> Tensor",
"NO_NS::NO_FUNCTION",
"cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"cumprod_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"cumprod_.dimname(Tensor(a!) self, Dimname dim, *, ScalarType? dtype=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cumprod_backward(Tensor grad, Tensor input, int dim, Tensor output) -> Tensor",
"NO_NS::NO_FUNCTION",
"cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"cumsum_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"cumsum_.dimname(Tensor(a!) self, Dimname dim, *, ScalarType? dtype=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)",
"ctc_loss_cpu",
"_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor",
"ctc_loss_backward_cpu",
"diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor",
"NO_NS::NO_FUNCTION",
"diagflat(Tensor self, int offset=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"diagonal.Dimname(Tensor(a) self, *, Dimname outdim, Dimname dim1, Dimname dim2, int offset=0) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"diagonal_backward(Tensor grad, int[] input_sizes, int offset, int dim1, int dim2) -> Tensor",
"NO_NS::NO_FUNCTION",
"fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"diff(Tensor self, int n=1, int dim=-1, Tensor? prepend=None, Tensor? append=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"diff.out(Tensor self, int n=1, int dim=-1, Tensor? prepend=None, Tensor? append=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"div.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"div_out",
"div.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> Tensor",
"NO_NS::NO_FUNCTION",
"div_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"div.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)",
"div_out_mode",
"div.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"div.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> Tensor",
"NO_NS::NO_FUNCTION",
"div_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"divide.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"divide.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"divide.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> Tensor",
"NO_NS::NO_FUNCTION",
"divide_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"divide.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"divide.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> Tensor",
"NO_NS::NO_FUNCTION",
"divide_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"true_divide.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"true_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"true_divide.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"true_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"dot(Tensor self, Tensor tensor) -> Tensor",
"dot",
"dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"vdot(Tensor self, Tensor other) -> Tensor",
"vdot",
"vdot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"einsum(str equation, Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor",
"NO_NS::NO_FUNCTION",
"embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor",
"embedding_dense_backward_cpu",
"embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)",
"embedding_renorm_cpu_",
"embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor",
"NO_NS::NO_FUNCTION",
"_embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)",
"_embedding_bag_forward_only_cpu",
"_rowwise_prune(Tensor weight, Tensor mask, ScalarType compressed_indices_dtype) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"row_stack(Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"row_stack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"embedding_bag.padding_idx(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, bool include_last_offset, int? padding_idx) -> (Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)",
"_embedding_bag_cpu",
"_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor",
"NO_NS::NO_FUNCTION",
"_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor",
"NO_NS::NO_FUNCTION",
"_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor",
"_embedding_bag_dense_backward_cpu",
"_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode, int padding_idx=-1) -> Tensor",
"_embedding_bag_per_sample_weights_backward_cpu",
"empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"empty_cpu",
"new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"new_empty_strided(Tensor self, int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"new_zeros(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor",
"empty_affine_quantized_other_backends_stub",
"_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor",
"empty_per_channel_affine_quantized_other_backends_stub",
"resize_(Tensor(a!) self, int[] size, *, MemoryFormat? memory_format=None) -> Tensor(a!)",
"resize_",
"empty_quantized(int[] size, Tensor qtensor) -> Tensor",
"NO_NS::NO_FUNCTION",
"empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"empty_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"empty_strided_cpu",
"erf(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"erf_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"erf_out",
"erfc(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"erfc_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"erfc_out",
"exp(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"exp_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"exp_out",
"exp2(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"exp2_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"exp2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"exp2_out",
"expm1(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"expm1_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"expm1_out",
"expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"expand_as(Tensor(a) self, Tensor other) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)",
"eye_out_cpu",
"eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)",
"eye_out_cpu",
"flatten.using_ints(Tensor(a) self, int start_dim=0, int end_dim=-1) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"flatten.named_out_dim(Tensor(a) self, int start_dim, int end_dim, Dimname out_dim) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"flatten.using_names(Tensor(a) self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"flatten.DimnameList(Tensor(a) self, Dimname[] dims, Dimname out_dim) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"unflatten.int(Tensor(a) self, int dim, int[] sizes, Dimname[]? names=None) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"unflatten.Dimname(Tensor(a) self, Dimname dim, int[] sizes, Dimname[] names) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)",
"fill_",
"fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)",
"fill_",
"floor(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"floor_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"floor_out",
"floor_divide(Tensor self, Tensor other) -> Tensor",
"floor_divide",
"floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"floor_divide_",
"floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"floor_divide_out",
"floor_divide.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"frac(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"frac_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"frac_out",
"full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"full_like(Tensor self, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"from_file",
"gcd.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"gcd_out",
"gcd(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"gcd_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"lcm.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"lcm_out",
"lcm(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"lcm_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor",
"NO_NS::NO_FUNCTION",
"grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor",
"grid_sampler_2d_cpu",
"grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)",
"grid_sampler_2d_backward_cpu",
"_grid_sampler_2d_cpu_fallback(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor",
"NO_NS::NO_FUNCTION",
"_grid_sampler_2d_cpu_fallback_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor",
"grid_sampler_3d_cpu",
"grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)",
"grid_sampler_3d_backward_cpu",
"hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"kaiser_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"kaiser_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"kaiser_window.beta(int window_length, bool periodic, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor",
"NO_NS::NO_FUNCTION",
"native_group_norm(Tensor input, Tensor? weight, Tensor? bias, int N, int C, int HxW, int group, float eps) -> (Tensor, Tensor, Tensor)",
"native_group_norm",
"native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int N, int C, int HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"native_group_norm_backward",
"_fft_r2c(Tensor self, int[] dim, int normalization, bool onesided) -> Tensor",
"_fft_r2c_mkl",
"_fft_r2c.out(Tensor self, int[] dim, int normalization, bool onesided, *, Tensor(a!) out) -> Tensor(a!)",
"_fft_r2c_mkl_out",
"_fft_c2r(Tensor self, int[] dim, int normalization, int last_dim_size) -> Tensor",
"_fft_c2r_mkl",
"_fft_c2r.out(Tensor self, int[] dim, int normalization, int last_dim_size, *, Tensor(a!) out) -> Tensor(a!)",
"_fft_c2r_mkl_out",
"_fft_c2c(Tensor self, int[] dim, int normalization, bool forward) -> Tensor",
"_fft_c2c_mkl",
"_fft_c2c.out(Tensor self, int[] dim, int normalization, bool forward, *, Tensor(a!) out) -> Tensor(a!)",
"_fft_c2c_mkl_out",
"_cufft_get_plan_cache_size(int device_index) -> int",
"NO_NS::NO_FUNCTION",
"_cufft_get_plan_cache_max_size(int device_index) -> int",
"NO_NS::NO_FUNCTION",
"_cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()",
"NO_NS::NO_FUNCTION",
"_cufft_clear_plan_cache(int device_index) -> ()",
"NO_NS::NO_FUNCTION",
"index.Tensor(Tensor self, Tensor?[] indices) -> Tensor",
"index",
"index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)",
"_index_put_impl_",
"instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor",
"NO_NS::NO_FUNCTION",
"inverse(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_inverse_helper(Tensor self) -> Tensor",
"_inverse_helper_cpu",
"isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"isnan(Tensor self) -> Tensor",
"isnan",
"is_distributed(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"is_floating_point(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"is_complex(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"isreal(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"is_nonzero(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"is_same_size(Tensor self, Tensor other) -> bool",
"NO_NS::NO_FUNCTION",
"is_signed(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"kl_div(Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor",
"kl_div_backward_cpu",
"kron(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"kron.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"kthvalue_out_cpu",
"kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor",
"NO_NS::NO_FUNCTION",
"native_layer_norm(Tensor input, int[] normalized_shape, Tensor? weight, Tensor? bias, float eps) -> (Tensor, Tensor, Tensor)",
"layer_norm_cpu",
"native_layer_norm_backward(Tensor grad_out, Tensor input, int[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"layer_norm_backward_cpu",
"nan_to_num(Tensor self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"nan_to_num_(Tensor(a!) self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nan_to_num.out(Tensor self, float? nan=None, float? posinf=None, float? neginf=None, *, Tensor(a!) out) -> Tensor(a!)",
"nan_to_num_out",
"linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_linear(Tensor self, Tensor weight, Tensor? bias=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_linear_backward_input(int[] input_size, Tensor grad_output, Tensor weight) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_linear_backward_weights(Tensor grad_output, Tensor input, Tensor weight, bool bias_defined) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"mkldnn_linear_backward(Tensor self, Tensor grad_output, Tensor weight, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor",
"NO_NS::NO_FUNCTION",
"fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor",
"NO_NS::NO_FUNCTION",
"fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)",
"NO_NS::NO_FUNCTION",
"fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor",
"NO_NS::NO_FUNCTION",
"fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor",
"NO_NS::NO_FUNCTION",
"fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor",
"NO_NS::NO_FUNCTION",
"fbgemm_pack_quantized_matrix(Tensor input) -> Tensor",
"NO_NS::NO_FUNCTION",
"fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor",
"NO_NS::NO_FUNCTION",
"ldexp.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"ldexp_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"ldexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linspace(Scalar start, Scalar end, int? steps=None, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"linspace.out(Scalar start, Scalar end, int? steps=None, *, Tensor(a!) out) -> Tensor(a!)",
"linspace_cpu_out",
"log(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"log_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"log_out",
"log10(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"log10_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"log10_out",
"log1p(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"log1p_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"log1p_out",
"log2(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"log2_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"log2_out",
"logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"logaddexp_out",
"logaddexp(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"logaddexp2_out",
"logaddexp2(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"xlogy.Tensor(Tensor self, Tensor other) -> Tensor",
"xlogy",
"xlogy.Scalar_Self(Scalar self, Tensor other) -> Tensor",
"xlogy",
"xlogy.Scalar_Other(Tensor self, Scalar other) -> Tensor",
"xlogy",
"xlogy_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"xlogy_",
"xlogy_.Scalar_Other(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"xlogy_",
"xlogy.OutTensor(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"xlogy_out",
"xlogy.OutScalar_Self(Scalar self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"xlogy_out",
"xlogy.OutScalar_Other(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"xlogy_out",
"logdet(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"logspace(Scalar start, Scalar end, int? steps=None, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"logspace.out(Scalar start, Scalar end, int? steps=None, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)",
"logspace_cpu_out",
"log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor",
"log_softmax_cpu",
"_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor",
"log_softmax_backward_cpu",
"_logcumsumexp(Tensor self, int dim) -> Tensor",
"_logcumsumexp_cpu",
"_logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)",
"_logcumsumexp_out_cpu",
"logcumsumexp(Tensor self, int dim) -> Tensor",
"NO_NS::NO_FUNCTION",
"logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"logcumsumexp.dimname(Tensor self, Dimname dim) -> Tensor",
"NO_NS::NO_FUNCTION",
"logcumsumexp.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"matmul(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"matrix_rank(Tensor self, bool symmetric=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"matrix_power(Tensor self, int n) -> Tensor",
"NO_NS::NO_FUNCTION",
"matrix_power.out(Tensor self, int n, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"matrix_exp(Tensor self) -> Tensor",
"matrix_exp",
"matrix_exp_backward(Tensor self, Tensor grad) -> Tensor",
"NO_NS::NO_FUNCTION",
"_aminmax(Tensor self) -> (Tensor, Tensor)",
"_aminmax_all",
"_aminmax.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)",
"_aminmax",
"_compute_linear_combination(Tensor input, Tensor coefficients) -> Tensor",
"_compute_linear_combination",
"_compute_linear_combination.out(Tensor input, Tensor coefficients, *, Tensor(a!) out) -> Tensor(a!)",
"_compute_linear_combination_out",
"max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"max",
"max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)",
"max_out",
"max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"value_selecting_reduction_backward(Tensor grad, int dim, Tensor indices, int[] sizes, bool keepdim) -> Tensor",
"NO_NS::NO_FUNCTION",
"amax(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"amax.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"amax_out",
"max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_max_pool2d_backward(Tensor grad_output, Tensor output, Tensor input, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_max_pool3d_backward(Tensor grad_output, Tensor output, Tensor input, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantized_max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"mean(Tensor self, *, ScalarType? dtype=None) -> Tensor",
"mean_cpu_gpu",
"mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"mean_cpu_gpu",
"mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"mean_out_cpu_gpu",
"mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"median(Tensor self) -> Tensor",
"median_cpu",
"median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"median_out_cpu",
"median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"nanmedian(Tensor self) -> Tensor",
"nanmedian_cpu",
"nanmedian.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"nanmedian.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"nanmedian_out_cpu",
"nanmedian.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"nanmedian.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"min",
"min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"min_out",
"min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"amin(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"amin.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"amin_out",
"mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"miopen_convolution_backward_bias(Tensor grad_output) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor",
"NO_NS::NO_FUNCTION",
"miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])",
"NO_NS::NO_FUNCTION",
"mm(Tensor self, Tensor mat2) -> Tensor",
"mm_cpu",
"mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)",
"mm_cpu_out",
"_sparse_mm(Tensor sparse, Tensor dense) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_sparse_matmul(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_mask_helper(Tensor t, Tensor mask_indices) -> Tensor",
"NO_NS::NO_FUNCTION",
"mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)",
"mode",
"mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"mul.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"mul_out",
"mul.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"multiply.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"multiply_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"multiply.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"multiply.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"multiply_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"mv(Tensor self, Tensor vec) -> Tensor",
"mv",
"mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"mvlgamma(Tensor self, int p) -> Tensor",
"NO_NS::NO_FUNCTION",
"mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"narrow_copy(Tensor self, int dim, int start, int length) -> Tensor",
"narrow_copy_dense_cpu",
"narrow_copy.out(Tensor self, int dim, int start, int length, *, Tensor(a!) out) -> Tensor(a!)",
"narrow_copy_dense_cpu_out",
"narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"narrow.Tensor(Tensor(a) self, int dim, Tensor start, int length) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)",
"batch_norm_cpu",
"native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))",
"NO_NS::NO_FUNCTION",
"batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor",
"NO_NS::NO_FUNCTION",
"batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"batch_norm_backward_cpu",
"batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu, Tensor count) -> Tensor",
"NO_NS::NO_FUNCTION",
"batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)",
"batch_norm_update_stats_cpu",
"is_vulkan_available() -> bool",
"NO_NS::NO_FUNCTION",
"_nnpack_available() -> bool",
"NO_NS::NO_FUNCTION",
"_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor",
"NO_NS::NO_FUNCTION",
"_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor",
"NO_NS::NO_FUNCTION",
"ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_euclidean_dist(Tensor x1, Tensor x2) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor",
"_cdist_forward",
"_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor",
"_cdist_backward",
"pdist(Tensor self, float p=2) -> Tensor",
"NO_NS::NO_FUNCTION",
"_pdist_forward(Tensor self, float p=2) -> Tensor",
"_pdist_forward",
"_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor",
"_pdist_backward",
"cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor",
"NO_NS::NO_FUNCTION",
"permute(Tensor(a) self, int[] dims) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"movedim.intlist(Tensor(a) self, int[] source, int[] destination) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"movedim.int(Tensor(a) self, int source, int destination) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"moveaxis.intlist(Tensor(a) self, int[] source, int[] destination) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"moveaxis.int(Tensor(a) self, int source, int destination) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"numpy_T(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"pixel_shuffle(Tensor self, int upscale_factor) -> Tensor",
"NO_NS::NO_FUNCTION",
"pixel_unshuffle(Tensor self, int downscale_factor) -> Tensor",
"NO_NS::NO_FUNCTION",
"channel_shuffle(Tensor self, int groups) -> Tensor",
"channel_shuffle",
"is_pinned(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"pin_memory(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"pinverse(Tensor self, float rcond=1e-15) -> Tensor",
"NO_NS::NO_FUNCTION",
"poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor",
"NO_NS::NO_FUNCTION",
"rad2deg(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"rad2deg_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"rad2deg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"deg2rad(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"deg2rad_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"deg2rad.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"rand_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"randint_like(Tensor self, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"randn_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randperm(int n, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randperm.generator(int n, *, Generator? generator, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)",
"randperm_out_cpu",
"range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)",
"range_cpu_out",
"ravel(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"reciprocal(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"reciprocal_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"reciprocal_out",
"neg(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"neg_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"neg_out",
"negative(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"negative_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"negative.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"repeat(Tensor self, int[] repeats) -> Tensor",
"NO_NS::NO_FUNCTION",
"repeat_interleave.Tensor(Tensor repeats) -> Tensor",
"repeat_interleave_cpu",
"repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"reshape(Tensor(a) self, int[] shape) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_mkldnn_reshape(Tensor self, int[] shape) -> Tensor",
"NO_NS::NO_FUNCTION",
"reshape_as(Tensor(a) self, Tensor other) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"round(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"round_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"round_out",
"rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"relu(Tensor self) -> Tensor",
"relu",
"relu_(Tensor(a!) self) -> Tensor(a!)",
"relu_",
"relu6(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"relu6_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"prelu(Tensor self, Tensor weight) -> Tensor",
"prelu_cpu",
"prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)",
"prelu_backward_cpu",
"gelu(Tensor self) -> Tensor",
"gelu_cpu",
"gelu_backward(Tensor grad, Tensor self) -> Tensor",
"gelu_backward_cpu",
"infinitely_differentiable_gelu_backward(Tensor grad, Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor",
"hardshrink",
"hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor",
"hardshrink_backward",
"rsqrt(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"rsqrt_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"rsqrt_out",
"select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"select.int(Tensor(a) self, int dim, int index) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"select_backward(Tensor grad, int[] input_sizes, int dim, int index) -> Tensor",
"NO_NS::NO_FUNCTION",
"selu(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"selu_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"celu(Tensor self, Scalar alpha=1.0) -> Tensor",
"NO_NS::NO_FUNCTION",
"celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"silu(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"silu_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"silu.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"silu_out",
"silu_backward(Tensor grad_output, Tensor self) -> Tensor",
"silu_backward",
"sigmoid(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"sigmoid_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"sigmoid_out",
"logit(Tensor self, float? eps=None) -> Tensor",
"logit",
"logit_(Tensor(a!) self, float? eps=None) -> Tensor(a!)",
"logit_",
"logit.out(Tensor self, float? eps=None, *, Tensor(a!) out) -> Tensor(a!)",
"logit_out",
"sin(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"sin_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"sin_out",
"sinc(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"sinc_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sinc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"sinc_out",
"sinh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"sinh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"sinh_out",
"detach(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"detach_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"size.int(Tensor self, int dim) -> int",
"NO_NS::NO_FUNCTION",
"size.Dimname(Tensor self, Dimname dim) -> int",
"NO_NS::NO_FUNCTION",
"slice.Tensor(Tensor(a) self, int dim=0, int? start=0, int? end=9223372036854775807, int step=1) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"slice_backward(Tensor grad, int[] input_sizes, int dim, int start, int end, int step) -> Tensor",
"NO_NS::NO_FUNCTION",
"slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)",
"NO_NS::NO_FUNCTION",
"smm(Tensor self, Tensor mat2) -> Tensor",
"NO_NS::NO_FUNCTION",
"softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_softmax(Tensor self, int dim, bool half_to_float) -> Tensor",
"softmax_cpu",
"_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor",
"softmax_backward_cpu",
"unsafe_split.Tensor(Tensor self, int split_size, int dim=0) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"unsafe_split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"split_with_sizes(Tensor(a) self, int[] split_sizes, int dim=0) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"hsplit.int(Tensor(a) self, int sections) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"hsplit.array(Tensor(a) self, int[] indices) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"vsplit.int(Tensor(a) self, int sections) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"vsplit.array(Tensor(a) self, int[] indices) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"dsplit.int(Tensor(a) self, int sections) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"dsplit.array(Tensor(a) self, int[] indices) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"squeeze(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"squeeze_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"squeeze_.dimname(Tensor(a!) self, Dimname dim) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"_sspaddmm_out_only_sparse",
"stack(Tensor[] tensors, int dim=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_stack(Tensor[] tensors, int dim=0) -> Tensor",
"_stack_cpu",
"_stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)",
"_stack_out_cpu",
"hstack(Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"hstack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"vstack(Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"vstack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"dstack(Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"dstack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool? onesided=None, bool? return_complex=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"istft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool center=True, bool normalized=False, bool? onesided=None, int? length=None, bool return_complex=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"stride.int(Tensor self, int dim) -> int",
"NO_NS::NO_FUNCTION",
"stride.Dimname(Tensor self, Dimname dim) -> int",
"NO_NS::NO_FUNCTION",
"sum(Tensor self, *, ScalarType? dtype=None) -> Tensor",
"sum",
"sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"sum",
"sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"sum_out",
"sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nansum(Tensor self, *, ScalarType? dtype=None) -> Tensor",
"nansum",
"nansum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"nansum",
"nansum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"nansum_out",
"sum_to_size(Tensor self, int[] size) -> Tensor",
"NO_NS::NO_FUNCTION",
"sqrt(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"sqrt_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"sqrt_out",
"square(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"square_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"square.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"square_out",
"std(Tensor self, bool unbiased=True) -> Tensor",
"NO_NS::NO_FUNCTION",
"std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"std.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> Tensor",
"std",
"std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"std_mean.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)",
"std_mean",
"std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"std_mean.correction_names(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"std.correction_out(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)",
"std_out",
"std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"std.correction_names(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"std.correction_names_out(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"prod(Tensor self, *, ScalarType? dtype=None) -> Tensor",
"prod",
"prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"prod",
"prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"prod_out",
"prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"t(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"t_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"tan(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"tan_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"tan_out",
"tanh(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"tanh_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"tanh_out",
"tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor",
"NO_NS::NO_FUNCTION",
"tensordot.out(Tensor self, Tensor other, int[] dims_self, int[] dims_other, *, Tensor(a!) out) -> Tensor(a!)",
"tensordot_out",
"threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor",
"threshold",
"threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)",
"threshold_",
"threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)",
"threshold_out",
"threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor",
"threshold_backward",
"tile(Tensor self, int[] dims) -> Tensor",
"NO_NS::NO_FUNCTION",
"transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_mkldnn_transpose(Tensor self, int dim0, int dim1) -> Tensor",
"NO_NS::NO_FUNCTION",
"transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"one_hot(Tensor self, int num_classes=-1) -> Tensor",
"NO_NS::NO_FUNCTION",
"flip(Tensor self, int[] dims) -> Tensor",
"flip_cpu",
"fliplr(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"flipud(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor",
"roll_cpu",
"rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor",
"NO_NS::NO_FUNCTION",
"trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor",
"NO_NS::NO_FUNCTION",
"trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor",
"NO_NS::NO_FUNCTION",
"_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"trunc(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"trunc_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"trunc_out",
"fix(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"fix_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fix.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"type_as(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool",
"NO_NS::NO_FUNCTION",
"_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)",
"_unique_cpu",
"unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)",
"unique_dim_cpu",
"unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)",
"unique_consecutive_cpu",
"unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)",
"unique_dim_consecutive_cpu",
"_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)",
"_unique2_cpu",
"_unsafe_view(Tensor self, int[] size) -> Tensor",
"NO_NS::NO_FUNCTION",
"unsqueeze(Tensor(a) self, int dim) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"vander(Tensor x, int? N=None, bool increasing=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"var(Tensor self, bool unbiased=True) -> Tensor",
"NO_NS::NO_FUNCTION",
"var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"var.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> Tensor",
"var",
"var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"var.correction_out(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)",
"var_out",
"var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"var.correction_names(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"var.correction_names_out(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"var_mean.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)",
"var_mean",
"var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"var_mean.correction_names(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"view_as(Tensor(a) self, Tensor other) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"where.self(Tensor condition, Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"where.ScalarSelf(Tensor condition, Scalar self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"where.ScalarOther(Tensor condition, Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"where.Scalar(Tensor condition, Scalar self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"where(Tensor condition) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor",
"_s_where",
"norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_standard_gamma_grad(Tensor self, Tensor output) -> Tensor",
"_standard_gamma_grad_cpu",
"_standard_gamma(Tensor self, Generator? generator=None) -> Tensor",
"_s_gamma_cpu",
"_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor",
"_dirichlet_grad_cpu",
"_sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor",
"_s_dirichlet_cpu",
"poisson(Tensor self, Generator? generator=None) -> Tensor",
"_s_poisson_cpu",
"binomial(Tensor count, Tensor prob, Generator? generator=None) -> Tensor",
"_s_binomial_cpu",
"native_norm(Tensor self, Scalar p=2) -> Tensor",
"NO_NS::NO_FUNCTION",
"native_norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, ScalarType? dtype) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_sum(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_softmax(Tensor self, int dim, bool half_to_float) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor",
"norm",
"norm.Scalar(Tensor self, Scalar p=2) -> Tensor",
"norm",
"norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor",
"norm",
"norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor",
"norm",
"norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)",
"norm_out",
"norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"norm_out",
"norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor",
"NO_NS::NO_FUNCTION",
"norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"frexp.Tensor(Tensor self) -> (Tensor mantissa, Tensor exponent)",
"NO_NS::NO_FUNCTION",
"frexp.Tensor_out(Tensor self, *, Tensor(a!) mantissa, Tensor(b!) exponent) -> (Tensor(a!) mantissa, Tensor(b!) exponent)",
"frexp_out",
"frobenius_norm(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nuclear_norm(Tensor self, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"clone(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"positive(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"resize_as_(Tensor(a!) self, Tensor the_template, *, MemoryFormat? memory_format=None) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"resize_as_sparse_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"zero_(Tensor(a!) self) -> Tensor(a!)",
"zero_",
"sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"sub_out",
"sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"subtract.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"subtract.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"subtract_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"subtract.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"subtract_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor",
"rsub",
"heaviside.out(Tensor self, Tensor values, *, Tensor(a!) out) -> Tensor(a!)",
"heaviside_out",
"heaviside(Tensor self, Tensor values) -> Tensor",
"NO_NS::NO_FUNCTION",
"heaviside_(Tensor(a!) self, Tensor values) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"addmm_cpu_out",
"addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor",
"addmm_cpu",
"addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)",
"addmm_cpu_",
"sparse_csr_tensor.crow_col_value_size(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"sparse_csr_tensor.crow_col_value(Tensor crow_indices, Tensor col_indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"sparse_coo_tensor.size(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"_validate_sparse_coo_tensor_args(Tensor indices, Tensor values, int[] size) -> ()",
"NO_NS::NO_FUNCTION",
"_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sparse_mask(Tensor self, Tensor mask) -> Tensor",
"NO_NS::NO_FUNCTION",
"to_dense(Tensor self, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"to_dense_backward(Tensor grad, Tensor input) -> Tensor",
"NO_NS::NO_FUNCTION",
"sparse_dim(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"_dimI(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"dense_dim(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"_dimV(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"_nnz(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"coalesce(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_coalesce(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"is_coalesced(Tensor self) -> bool",
"NO_NS::NO_FUNCTION",
"_indices(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_values(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"indices(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"values(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"crow_indices(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"col_indices(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"hspmm(Tensor mat1, Tensor mat2) -> Tensor",
"NO_NS::NO_FUNCTION",
"copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]",
"NO_NS::NO_FUNCTION",
"to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor",
"dense_to_sparse",
"to_sparse(Tensor self) -> Tensor",
"dense_to_sparse",
"to_mkldnn(Tensor self, ScalarType? dtype=None) -> Tensor",
"dense_to_mkldnn",
"mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=0, int[2] stride=1, int[2] dilation=1, int groups=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_reorder_conv3d_weight(Tensor self, int[3] padding=0, int[3] stride=1, int[3] dilation=1, int groups=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor",
"quantize_per_tensor",
"quantize_per_tensor.tensors(Tensor[] tensors, Tensor scales, Tensor zero_points, ScalarType dtype) -> Tensor[]",
"quantize_per_tensor_list_cpu",
"quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor",
"quantize_per_channel_cpu",
"dequantize.self(Tensor self) -> Tensor",
"dequantize_cpu",
"dequantize.tensors(Tensor[] tensors) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"q_scale(Tensor self) -> float",
"NO_NS::NO_FUNCTION",
"q_zero_point(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"q_per_channel_scales(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"q_per_channel_zero_points(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"q_per_channel_axis(Tensor self) -> int",
"NO_NS::NO_FUNCTION",
"int_repr(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> Tensor",
"make_per_tensor_quantized_tensor_cpu",
"_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> Tensor",
"make_per_channel_quantized_tensor_cpu",
"qscheme(Tensor self) -> QScheme",
"NO_NS::NO_FUNCTION",
"fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor",
"NO_NS::NO_FUNCTION",
"fake_quantize_per_tensor_affine_cachemask(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor output, Tensor mask)",
"fake_quantize_per_tensor_affine_cachemask",
"fake_quantize_per_tensor_affine_cachemask_backward(Tensor grad, Tensor mask) -> Tensor",
"NO_NS::NO_FUNCTION",
"_fake_quantize_learnable_per_tensor_affine(Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max, float grad_factor=1.0) -> Tensor",
"_fake_quantize_learnable_per_tensor_affine",
"_fake_quantize_learnable_per_tensor_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max, float grad_factor=1.0) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor",
"NO_NS::NO_FUNCTION",
"fake_quantize_per_channel_affine_cachemask(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor output, Tensor mask)",
"fake_quantize_per_channel_affine_cachemask",
"fake_quantize_per_channel_affine_cachemask_backward(Tensor grad, Tensor mask) -> Tensor",
"NO_NS::NO_FUNCTION",
"_fake_quantize_learnable_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max, float grad_factor=1.0) -> Tensor",
"_fake_quantize_learnable_per_channel_affine",
"_fake_quantize_learnable_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max, float grad_factor=1.0) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_choose_qparams_per_tensor(Tensor self, bool reduce_range=False) -> (float, int)",
"NO_NS::NO_FUNCTION",
"_saturate_weight_to_fp16(Tensor weight) -> Tensor",
"NO_NS::NO_FUNCTION",
"choose_qparams_optimized(Tensor input, int numel, int n_bins, float ratio, int bit_width) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"to.dtype_layout(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"meshgrid(Tensor[] tensors) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"cartesian_prod(Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"item(Tensor self) -> Scalar",
"NO_NS::NO_FUNCTION",
"result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType",
"NO_NS::NO_FUNCTION",
"result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType",
"NO_NS::NO_FUNCTION",
"result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType",
"NO_NS::NO_FUNCTION",
"result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType",
"NO_NS::NO_FUNCTION",
"can_cast(ScalarType from, ScalarType to) -> bool",
"NO_NS::NO_FUNCTION",
"promote_types(ScalarType type1, ScalarType type2) -> ScalarType",
"NO_NS::NO_FUNCTION",
"_local_scalar_dense(Tensor self) -> Scalar",
"_local_scalar_dense_cpu",
"_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"quantized_lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor",
"NO_NS::NO_FUNCTION",
"_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor",
"NO_NS::NO_FUNCTION",
"_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)",
"set_",
"set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)",
"set_storage_cpu_",
"set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)",
"set_tensor_",
"set_(Tensor(a!) self) -> Tensor(a!)",
"set_cpu_",
"is_set_to(Tensor self, Tensor tensor) -> bool",
"is_set_to",
"masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)",
"masked_fill__cpu",
"masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor",
"NO_NS::NO_FUNCTION",
"masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)",
"masked_fill__cpu",
"masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor",
"NO_NS::NO_FUNCTION",
"masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)",
"masked_scatter__cpu",
"masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor",
"NO_NS::NO_FUNCTION",
"view(Tensor(a) self, int[] size) -> Tensor(a)",
"view",
"view.dtype(Tensor(a) self, ScalarType dtype) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)",
"put_",
"put(Tensor self, Tensor index, Tensor source, bool accumulate=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"index_add_.alpha(Tensor(a!) self, int dim, Tensor index, Tensor source, *, Scalar alpha) -> Tensor(a!)",
"index_add_cpu_",
"index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_add.alpha(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)",
"index_fill_",
"index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)",
"index_fill_",
"index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_fill_.Dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"index_fill_.Dimname_Tensor(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"index_fill.Dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_fill.Dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor",
"NO_NS::NO_FUNCTION",
"scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)",
"scatter_",
"scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor",
"NO_NS::NO_FUNCTION",
"scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)",
"scatter_fill_",
"scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor",
"NO_NS::NO_FUNCTION",
"scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor",
"NO_NS::NO_FUNCTION",
"scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor",
"NO_NS::NO_FUNCTION",
"scatter_.reduce(Tensor(a!) self, int dim, Tensor index, Tensor src, *, str reduce) -> Tensor(a!)",
"scatter_reduce_",
"scatter_.value_reduce(Tensor(a!) self, int dim, Tensor index, Scalar value, *, str reduce) -> Tensor(a!)",
"scatter_scalar_reduce_",
"scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)",
"scatter_add_",
"scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor",
"NO_NS::NO_FUNCTION",
"scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor",
"NO_NS::NO_FUNCTION",
"eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"bitwise_and_out",
"bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"bitwise_and_out",
"bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"__and__.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"__and__.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"bitwise_or_out",
"bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"bitwise_or_out",
"bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"__or__.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"__or__.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"bitwise_xor_out",
"bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"bitwise_xor_out",
"bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"__xor__.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"__xor__.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"__lshift__.Scalar(Tensor self, Scalar other) -> Tensor",
"__lshift__",
"__lshift__.Tensor(Tensor self, Tensor other) -> Tensor",
"__lshift__",
"__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"__ilshift__",
"__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"__ilshift__",
"__rshift__.Scalar(Tensor self, Scalar other) -> Tensor",
"__rshift__",
"__rshift__.Tensor(Tensor self, Tensor other) -> Tensor",
"__rshift__",
"__irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"__irshift__",
"__irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"__irshift__",
"tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)",
"tril_cpu_",
"triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)",
"triu_cpu_",
"digamma_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)",
"legacy::cpu::_th_renorm_",
"lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)",
"lerp_cpu_scalar_",
"lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)",
"lerp_cpu_tensor_",
"fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"fmod_",
"fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"fmod_",
"remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"remainder_",
"remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"remainder_",
"addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)",
"addbmm_",
"addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)",
"addbmm_out",
"addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor",
"addbmm",
"addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> Tensor(a!)",
"random_",
"random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)",
"random_",
"random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)",
"random_",
"uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)",
"uniform_",
"cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)",
"cauchy_",
"log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)",
"log_normal_",
"exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)",
"exponential_",
"geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)",
"geometric_",
"diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)",
"diag_cpu_out",
"diag(Tensor self, int diagonal=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"diag_backward(Tensor grad, int[] input_sizes, int diagonal) -> Tensor",
"NO_NS::NO_FUNCTION",
"cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)",
"cross_out",
"cross(Tensor self, Tensor other, int? dim=None) -> Tensor",
"cross",
"triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)",
"triu_cpu_out",
"triu(Tensor self, int diagonal=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)",
"tril_cpu_out",
"tril(Tensor self, int diagonal=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"tril_indices_cpu",
"triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"triu_indices_cpu",
"trace(Tensor self) -> Tensor",
"trace_cpu",
"trace_backward(Tensor grad, int[] sizes) -> Tensor",
"NO_NS::NO_FUNCTION",
"ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"ne_out",
"ne.Scalar(Tensor self, Scalar other) -> Tensor",
"ne",
"ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"ne_out",
"ne.Tensor(Tensor self, Tensor other) -> Tensor",
"ne",
"ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"not_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"not_equal.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"not_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"not_equal.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"not_equal_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"not_equal_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"eq_out",
"eq.Scalar(Tensor self, Scalar other) -> Tensor",
"eq",
"eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"eq_out",
"eq.Tensor(Tensor self, Tensor other) -> Tensor",
"eq",
"ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"ge_out",
"ge.Scalar(Tensor self, Scalar other) -> Tensor",
"ge",
"ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"ge_out",
"ge.Tensor(Tensor self, Tensor other) -> Tensor",
"ge",
"ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"greater_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"greater_equal.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"greater_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"greater_equal.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"greater_equal_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"greater_equal_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"le_out",
"le.Scalar(Tensor self, Scalar other) -> Tensor",
"le",
"le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"le_out",
"le.Tensor(Tensor self, Tensor other) -> Tensor",
"le",
"le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"less_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"less_equal.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"less_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"less_equal.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"less_equal_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"less_equal_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"gt_out",
"gt.Scalar(Tensor self, Scalar other) -> Tensor",
"gt",
"gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"gt_out",
"gt.Tensor(Tensor self, Tensor other) -> Tensor",
"gt",
"gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"greater.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"greater.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"greater.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"greater.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"greater_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"greater_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"lt_out",
"lt.Scalar(Tensor self, Scalar other) -> Tensor",
"lt",
"lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"lt_out",
"lt.Tensor(Tensor self, Tensor other) -> Tensor",
"lt",
"lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"less.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"less.Scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"less.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"less.Tensor(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"less_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"less_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)",
"take_out",
"take(Tensor self, Tensor index) -> Tensor",
"take",
"take_along_dim.out(Tensor self, Tensor indices, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"take_along_dim(Tensor self, Tensor indices, int? dim=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)",
"index_select_out_cpu_",
"index_select(Tensor self, int dim, Tensor index) -> Tensor",
"index_select_cpu_",
"index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor",
"NO_NS::NO_FUNCTION",
"index_select_backward(Tensor grad, int[] self_sizes, int dim, Tensor index) -> Tensor",
"NO_NS::NO_FUNCTION",
"masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)",
"masked_select_out_cpu",
"masked_select(Tensor self, Tensor mask) -> Tensor",
"masked_select_cpu",
"masked_select_backward(Tensor grad, Tensor input, Tensor mask) -> Tensor",
"NO_NS::NO_FUNCTION",
"nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"legacy::cpu::_th_nonzero_out",
"nonzero(Tensor self) -> Tensor",
"legacy::cpu::_th_nonzero",
"nonzero_numpy(Tensor self) -> Tensor[]",
"NO_NS::NO_FUNCTION",
"gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)",
"gather_out_cpu_cuda",
"gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor",
"gather",
"gather_backward(Tensor grad, Tensor self, int dim, Tensor index, bool sparse_grad) -> Tensor",
"NO_NS::NO_FUNCTION",
"gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor",
"NO_NS::NO_FUNCTION",
"addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)",
"addcmul_out",
"addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)",
"addcdiv_out",
"addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"cross_entropy_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor",
"NO_NS::NO_FUNCTION",
"lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)",
"legacy::cpu::_th_gels_out",
"lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)",
"legacy::cpu::_th_gels",
"triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)",
"triangular_solve_out",
"triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)",
"triangular_solve",
"symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)",
"NO_NS::NO_FUNCTION",
"symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)",
"NO_NS::NO_FUNCTION",
"_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)",
"_symeig_helper_cpu",
"eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)",
"NO_NS::NO_FUNCTION",
"eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)",
"NO_NS::NO_FUNCTION",
"svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)",
"NO_NS::NO_FUNCTION",
"svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)",
"NO_NS::NO_FUNCTION",
"_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor U, Tensor S, Tensor V)",
"_svd_helper_cpu",
"swapaxes(Tensor(a) self, int axis0, int axis1) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"swapaxes_(Tensor(a!) self, int axis0, int axis1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"swapdims(Tensor(a) self, int dim0, int dim1) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"swapdims_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)",
"cholesky_out",
"cholesky(Tensor self, bool upper=False) -> Tensor",
"cholesky",
"cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor",
"_cholesky_solve_helper_cpu",
"solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)",
"NO_NS::NO_FUNCTION",
"solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)",
"NO_NS::NO_FUNCTION",
"_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)",
"_solve_helper_cpu",
"cholesky_inverse(Tensor self, bool upper=False) -> Tensor",
"cholesky_inverse",
"cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)",
"cholesky_inverse_out",
"qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)",
"NO_NS::NO_FUNCTION",
"qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)",
"NO_NS::NO_FUNCTION",
"geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)",
"geqrf_out",
"geqrf(Tensor self) -> (Tensor a, Tensor tau)",
"geqrf",
"orgqr(Tensor self, Tensor input2) -> Tensor",
"NO_NS::NO_FUNCTION",
"orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)",
"ormqr_out",
"ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> Tensor",
"ormqr",
"_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)",
"_lu_with_info",
"lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor",
"NO_NS::NO_FUNCTION",
"lu_unpack(Tensor LU_data, Tensor LU_pivots, bool unpack_data=True, bool unpack_pivots=True) -> (Tensor P, Tensor L, Tensor U)",
"lu_unpack",
"lu_unpack.out(Tensor LU_data, Tensor LU_pivots, bool unpack_data=True, bool unpack_pivots=True, *, Tensor(a!) P, Tensor(b!) L, Tensor(c!) U) -> (Tensor(a!) P, Tensor(b!) L, Tensor(c!) U)",
"lu_unpack_out",
"multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)",
"multinomial_out",
"multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor",
"multinomial",
"lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"lgamma_out",
"lgamma_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"lgamma(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"digamma_out",
"digamma(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"polygamma_out",
"polygamma(int n, Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"polygamma_(Tensor(a!) self, int n) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"erfinv(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"erfinv_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"erfinv_out",
"i0(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"i0_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"i0.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"i0_out",
"sign(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"sign_(Tensor(a!) self) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"sign_out",
"signbit(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"signbit.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"signbit_out",
"dist(Tensor self, Tensor other, Scalar p=2) -> Tensor",
"NO_NS::NO_FUNCTION",
"atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"atan2_out",
"atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"atan2(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)",
"lerp_cpu_scalar_out",
"lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)",
"lerp_cpu_tensor_out",
"lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor",
"lerp_cpu_scalar",
"lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor",
"lerp_cpu_tensor",
"histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)",
"legacy::cpu::_th_histc_out",
"histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor",
"legacy::cpu::_th_histc",
"fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"fmod_out",
"fmod.Scalar(Tensor self, Scalar other) -> Tensor",
"fmod",
"fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"fmod_out",
"fmod.Tensor(Tensor self, Tensor other) -> Tensor",
"fmod",
"hypot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"hypot_out",
"hypot(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"hypot_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"igamma.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"igamma_out",
"igamma(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"igamma_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"igammac.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"igammac_out",
"igammac(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"igammac_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nextafter.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"nextafter_out",
"nextafter(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"nextafter_(Tensor(a!) self, Tensor other) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"remainder_out",
"remainder.Scalar(Tensor self, Scalar other) -> Tensor",
"remainder",
"remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"remainder_out",
"remainder.Tensor(Tensor self, Tensor other) -> Tensor",
"remainder",
"min(Tensor self) -> Tensor",
"min",
"fmin(Tensor self, Tensor other) -> Tensor",
"fmin",
"fmin.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"fmin_out",
"max(Tensor self) -> Tensor",
"max",
"fmax(Tensor self, Tensor other) -> Tensor",
"fmax",
"fmax.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"fmax_out",
"maximum(Tensor self, Tensor other) -> Tensor",
"maximum",
"maximum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"maximum_out",
"max.other(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"minimum(Tensor self, Tensor other) -> Tensor",
"minimum",
"minimum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"minimum_out",
"min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"min.other(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantile.scalar_out(Tensor self, float q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"quantile.scalar(Tensor self, float q, int? dim=None, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantile.out(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"quantile(Tensor self, Tensor q, int? dim=None, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"nanquantile.scalar_out(Tensor self, float q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nanquantile.scalar(Tensor self, float q, int? dim=None, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"nanquantile.out(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nanquantile(Tensor self, Tensor q, int? dim=None, bool keepdim=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantile.new_scalar_out(Tensor self, float q, int? dim, bool keepdim, *, str interpolation, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"quantile.new_scalar(Tensor self, float q, int? dim, bool keepdim, *, str interpolation) -> Tensor",
"NO_NS::NO_FUNCTION",
"quantile.new_out(Tensor self, Tensor q, int? dim, bool keepdim, *, str interpolation, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"quantile.new(Tensor self, Tensor q, int? dim, bool keepdim, *, str interpolation) -> Tensor",
"NO_NS::NO_FUNCTION",
"nanquantile.new_scalar_out(Tensor self, float q, int? dim, bool keepdim, *, str interpolation, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nanquantile.new_scalar(Tensor self, float q, int? dim, bool keepdim, *, str interpolation) -> Tensor",
"NO_NS::NO_FUNCTION",
"nanquantile.new_out(Tensor self, Tensor q, int? dim, bool keepdim, *, str interpolation, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nanquantile.new(Tensor self, Tensor q, int? dim, bool keepdim, *, str interpolation) -> Tensor",
"NO_NS::NO_FUNCTION",
"sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"sort_out_cpu",
"sort.values_stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"sort_out_cpu_stable",
"sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)",
"sort_cpu",
"sort.stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)",
"sort_cpu_stable",
"sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"sort.dimname_values_stable(Tensor self, *, bool? stable, Dimname dim, bool descending=False, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"NO_NS::NO_FUNCTION",
"sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"sort.dimname_stable(Tensor self, *, bool? stable, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)",
"NO_NS::NO_FUNCTION",
"msort.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"msort(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)",
"topk_out_cpu",
"topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)",
"topk",
"all(Tensor self) -> Tensor",
"all",
"any(Tensor self) -> Tensor",
"any",
"renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)",
"legacy::cpu::_th_renorm_out",
"renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor",
"legacy::cpu::_th_renorm",
"unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)",
"unfold",
"unfold_backward(Tensor grad_in, int[] input_sizes, int dim, int size, int step) -> Tensor",
"unfold_backward",
"equal(Tensor self, Tensor other) -> bool",
"cpu_equal",
"pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)",
"pow_Tensor_Tensor_out",
"pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor",
"NO_NS::NO_FUNCTION",
"pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)",
"pow_Scalar_out",
"pow.Scalar(Scalar self, Tensor exponent) -> Tensor",
"NO_NS::NO_FUNCTION",
"pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)",
"pow_Tensor_Scalar_out",
"pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor",
"NO_NS::NO_FUNCTION",
"pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"float_power.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"float_power.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor",
"NO_NS::NO_FUNCTION",
"float_power.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"float_power.Scalar(Scalar self, Tensor exponent) -> Tensor",
"NO_NS::NO_FUNCTION",
"float_power.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"float_power.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor",
"NO_NS::NO_FUNCTION",
"float_power_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"float_power_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)",
"normal_",
"normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)",
"normal_out",
"normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor",
"normal",
"normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)",
"normal_out",
"normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor",
"normal",
"normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)",
"normal_out",
"normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor",
"normal",
"normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"alias(Tensor(a) self) -> Tensor(a)",
"NO_NS::NO_FUNCTION",
"_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)",
"_index_copy_impl_",
"_cumsum(Tensor self, int dim) -> Tensor",
"_cumsum_cpu",
"_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)",
"_cumsum_out_cpu",
"_cumprod(Tensor self, int dim) -> Tensor",
"_cumprod_cpu",
"_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)",
"_cumprod_out_cpu",
"_amp_foreach_non_finite_check_and_unscale_(Tensor(a!)[] self, Tensor(b!) found_inf, Tensor inv_scale) -> ()",
"NO_NS::NO_FUNCTION",
"_amp_update_scale_(Tensor(a!) self, Tensor(b!) growth_tracker, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_cat(Tensor[] tensors, int dim=0) -> Tensor",
"_cat_cpu",
"_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)",
"_cat_out_cpu",
"_foreach_add.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]",
"foreach_tensor_add_scalar_kernel_slow",
"_foreach_add_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()",
"foreach_tensor_add_scalar_kernel_slow_",
"_foreach_sub.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]",
"foreach_tensor_sub_scalar_kernel_slow",
"_foreach_sub_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()",
"foreach_tensor_sub_scalar_kernel_slow_",
"_foreach_mul.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]",
"foreach_tensor_mul_scalar_kernel_slow",
"_foreach_mul_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()",
"foreach_tensor_mul_scalar_kernel_slow_",
"_foreach_div.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]",
"foreach_tensor_div_scalar_kernel_slow",
"_foreach_div_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()",
"foreach_tensor_div_scalar_kernel_slow_",
"_foreach_add.List(Tensor[] tensors1, Tensor[] tensors2, *, Scalar alpha=1) -> Tensor[]",
"foreach_tensor_add_list_kernel_slow",
"_foreach_add_.List(Tensor(a!)[] self, Tensor[] other, *, Scalar alpha=1) -> ()",
"foreach_tensor_add_list_kernel_slow_",
"_foreach_sub.List(Tensor[] tensors1, Tensor[] tensors2, *, Scalar alpha=1) -> Tensor[]",
"foreach_tensor_sub_list_kernel_slow",
"_foreach_sub_.List(Tensor(a!)[] self, Tensor[] other, *, Scalar alpha=1) -> ()",
"foreach_tensor_sub_list_kernel_slow_",
"_foreach_mul.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]",
"foreach_tensor_mul_list_kernel_slow",
"_foreach_mul_.List(Tensor(a!)[] self, Tensor[] other) -> ()",
"foreach_tensor_mul_list_kernel_slow_",
"_foreach_div.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]",
"foreach_tensor_div_list_kernel_slow",
"_foreach_div_.List(Tensor(a!)[] self, Tensor[] other) -> ()",
"foreach_tensor_div_list_kernel_slow_",
"_foreach_add.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]",
"foreach_tensor_add_scalarlist_kernel_slow",
"_foreach_add_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()",
"foreach_tensor_add_scalarlist_kernel_slow_",
"_foreach_sub.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]",
"foreach_tensor_sub_scalarlist_kernel_slow",
"_foreach_sub_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()",
"foreach_tensor_sub_scalarlist_kernel_slow_",
"_foreach_div.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]",
"foreach_tensor_div_scalarlist_kernel_slow",
"_foreach_div_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()",
"foreach_tensor_div_scalarlist_kernel_slow_",
"_foreach_mul.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]",
"foreach_tensor_mul_scalarlist_kernel_slow",
"_foreach_mul_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()",
"foreach_tensor_mul_scalarlist_kernel_slow_",
"_foreach_exp(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_exp_slow",
"_foreach_zero_(Tensor(a!)[] self) -> ()",
"foreach_tensor_zero_slow_",
"_foreach_exp_(Tensor(a!)[] self) -> ()",
"foreach_tensor_exp_slow_",
"_foreach_sqrt(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_sqrt_slow",
"_foreach_sqrt_(Tensor(a!)[] self) -> ()",
"foreach_tensor_sqrt_slow_",
"_foreach_abs(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_abs_slow",
"_foreach_abs_(Tensor(a!)[] self) -> ()",
"foreach_tensor_abs_slow_",
"_foreach_acos(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_acos_slow",
"_foreach_acos_(Tensor(a!)[] self) -> ()",
"foreach_tensor_acos_slow_",
"_foreach_asin(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_asin_slow",
"_foreach_asin_(Tensor(a!)[] self) -> ()",
"foreach_tensor_asin_slow_",
"_foreach_atan(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_atan_slow",
"_foreach_atan_(Tensor(a!)[] self) -> ()",
"foreach_tensor_atan_slow_",
"_foreach_ceil(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_ceil_slow",
"_foreach_ceil_(Tensor(a!)[] self) -> ()",
"foreach_tensor_ceil_slow_",
"_foreach_cos(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_cos_slow",
"_foreach_cos_(Tensor(a!)[] self) -> ()",
"foreach_tensor_cos_slow_",
"_foreach_cosh(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_cosh_slow",
"_foreach_cosh_(Tensor(a!)[] self) -> ()",
"foreach_tensor_cosh_slow_",
"_foreach_erf(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_erf_slow",
"_foreach_erf_(Tensor(a!)[] self) -> ()",
"foreach_tensor_erf_slow_",
"_foreach_erfc(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_erfc_slow",
"_foreach_erfc_(Tensor(a!)[] self) -> ()",
"foreach_tensor_erfc_slow_",
"_foreach_expm1(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_expm1_slow",
"_foreach_expm1_(Tensor(a!)[] self) -> ()",
"foreach_tensor_expm1_slow_",
"_foreach_floor(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_floor_slow",
"_foreach_floor_(Tensor(a!)[] self) -> ()",
"foreach_tensor_floor_slow_",
"_foreach_log(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_log_slow",
"_foreach_log_(Tensor(a!)[] self) -> ()",
"foreach_tensor_log_slow_",
"_foreach_log10(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_log10_slow",
"_foreach_log10_(Tensor(a!)[] self) -> ()",
"foreach_tensor_log10_slow_",
"_foreach_log1p(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_log1p_slow",
"_foreach_log1p_(Tensor(a!)[] self) -> ()",
"foreach_tensor_log1p_slow_",
"_foreach_log2(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_log2_slow",
"_foreach_log2_(Tensor(a!)[] self) -> ()",
"foreach_tensor_log2_slow_",
"_foreach_neg(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_neg_slow",
"_foreach_neg_(Tensor(a!)[] self) -> ()",
"foreach_tensor_neg_slow_",
"_foreach_tan(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_tan_slow",
"_foreach_tan_(Tensor(a!)[] self) -> ()",
"foreach_tensor_tan_slow_",
"_foreach_tanh(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_tanh_slow",
"_foreach_tanh_(Tensor(a!)[] self) -> ()",
"foreach_tensor_tanh_slow_",
"_foreach_sin(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_sin_slow",
"_foreach_sin_(Tensor(a!)[] self) -> ()",
"foreach_tensor_sin_slow_",
"_foreach_sinh(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_sinh_slow",
"_foreach_sinh_(Tensor(a!)[] self) -> ()",
"foreach_tensor_sinh_slow_",
"_foreach_round(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_round_slow",
"_foreach_round_(Tensor(a!)[] self) -> ()",
"foreach_tensor_round_slow_",
"_foreach_lgamma(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_lgamma_slow",
"_foreach_lgamma_(Tensor(a!)[] self) -> ()",
"foreach_tensor_lgamma_slow_",
"_foreach_frac(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_frac_slow",
"_foreach_frac_(Tensor(a!)[] self) -> ()",
"foreach_tensor_frac_slow_",
"_foreach_reciprocal(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_reciprocal_slow",
"_foreach_reciprocal_(Tensor(a!)[] self) -> ()",
"foreach_tensor_reciprocal_slow_",
"_foreach_sigmoid(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_sigmoid_slow",
"_foreach_sigmoid_(Tensor(a!)[] self) -> ()",
"foreach_tensor_sigmoid_slow_",
"_foreach_trunc(Tensor[] tensors) -> Tensor[]",
"foreach_tensor_trunc_slow",
"_foreach_trunc_(Tensor(a!)[] self) -> ()",
"foreach_tensor_trunc_slow_",
"_foreach_addcdiv_.Scalar(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()",
"foreach_tensor_addcdiv_scalar_slow_",
"_foreach_addcmul_.Scalar(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()",
"foreach_tensor_addcmul_scalar_slow_",
"_foreach_addcdiv_.ScalarList(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()",
"foreach_tensor_addcdiv_scalarlist_slow_",
"_foreach_addcmul_.ScalarList(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()",
"foreach_tensor_addcmul_scalarlist_slow_",
"_foreach_addcdiv.Scalar(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> Tensor[]",
"foreach_tensor_addcdiv_scalar_slow",
"_foreach_addcmul.Scalar(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> Tensor[]",
"foreach_tensor_addcmul_scalar_slow",
"_foreach_addcdiv.ScalarList(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> Tensor[]",
"foreach_tensor_addcdiv_scalarlist_slow",
"_foreach_addcmul.ScalarList(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> Tensor[]",
"foreach_tensor_addcmul_scalarlist_slow",
"_foreach_maximum.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]",
"foreach_tensor_maximum_slow",
"_foreach_minimum.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]",
"foreach_tensor_minimum_slow",
"bucketize.Tensor(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor",
"bucketize_cpu",
"bucketize.Tensor_out(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)",
"bucketize_out_cpu",
"bucketize.Scalar(Scalar self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor",
"bucketize_cpu",
"searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False) -> Tensor",
"searchsorted_cpu",
"searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)",
"searchsorted_out_cpu",
"searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False) -> Tensor",
"searchsorted_cpu",
"mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)",
"mse_loss_out",
"mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor",
"mse_loss",
"mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)",
"mse_loss_backward_out",
"mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor",
"mse_loss_backward",
"l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)",
"l1_loss_backward_out",
"l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor",
"NO_NS::NO_FUNCTION",
"multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)",
"multi_margin_loss_cpu_out",
"multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor",
"multi_margin_loss_cpu",
"multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)",
"multi_margin_loss_cpu_backward_out",
"multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor",
"multi_margin_loss_cpu_backward",
"multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))",
"multilabel_margin_loss_forward_out_cpu",
"multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)",
"multilabel_margin_loss_forward_cpu",
"multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)",
"multilabel_margin_loss_backward_cpu_out",
"multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor",
"multilabel_margin_loss_backward_cpu",
"nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nll_loss_nd(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor",
"NO_NS::NO_FUNCTION",
"nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor",
"NO_NS::NO_FUNCTION",
"nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))",
"nll_loss_forward_out_cpu",
"nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)",
"nll_loss_forward_cpu",
"nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)",
"nll_loss_backward_out_cpu",
"nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor",
"nll_loss_backward_cpu",
"nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor",
"NO_NS::NO_FUNCTION",
"nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))",
"nll_loss2d_forward_out_cpu",
"nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)",
"nll_loss2d_forward_cpu",
"nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)",
"nll_loss2d_backward_out_cpu",
"nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor",
"nll_loss2d_backward_cpu",
"smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, float beta=1.0, *, Tensor(a!) out) -> Tensor(a!)",
"smooth_l1_loss_out",
"smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean, float beta=1.0) -> Tensor",
"smooth_l1_loss",
"smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta, *, Tensor(a!) grad_input) -> Tensor(a!)",
"smooth_l1_loss_backward_out",
"smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta) -> Tensor",
"NO_NS::NO_FUNCTION",
"huber_loss.out(Tensor self, Tensor target, int reduction=Mean, float delta=1.0, *, Tensor(a!) out) -> Tensor(a!)",
"huber_loss_out",
"huber_loss(Tensor self, Tensor target, int reduction=Mean, float delta=1.0) -> Tensor",
"huber_loss",
"huber_loss_backward.out(Tensor grad_output, Tensor self, Tensor target, int reduction, float delta, *, Tensor(a!) grad_input) -> Tensor(a!)",
"huber_loss_backward_out",
"huber_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float delta) -> Tensor",
"NO_NS::NO_FUNCTION",
"soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor",
"NO_NS::NO_FUNCTION",
"soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor",
"NO_NS::NO_FUNCTION",
"elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)",
"elu_out",
"elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor",
"elu",
"elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result) -> Tensor",
"elu_backward",
"elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)",
"glu_out",
"glu(Tensor self, int dim=-1) -> Tensor",
"glu",
"glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)",
"glu_backward_out",
"glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor",
"glu_backward",
"hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"hardsigmoid_out",
"hardsigmoid(Tensor self) -> Tensor",
"hardsigmoid",
"hardsigmoid_(Tensor(a!) self) -> Tensor(a!)",
"hardsigmoid_",
"hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor",
"hardsigmoid_backward",
"hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)",
"hardtanh_out",
"hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor",
"hardtanh",
"hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)",
"hardtanh_backward_out",
"hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor",
"hardtanh_backward",
"hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)",
"hardtanh_",
"hardswish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"hardswish_out",
"hardswish(Tensor self) -> Tensor",
"hardswish",
"hardswish_(Tensor(a!) self) -> Tensor(a!)",
"hardswish_",
"hardswish_backward(Tensor grad_output, Tensor self) -> Tensor",
"hardswish_backward",
"leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)",
"leaky_relu_out",
"leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor",
"leaky_relu",
"leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor",
"leaky_relu_backward",
"leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)",
"leaky_relu_",
"log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"log_sigmoid(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))",
"log_sigmoid_forward_out_cpu",
"log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)",
"log_sigmoid_forward_cpu",
"log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)",
"log_sigmoid_backward_out_cpu",
"log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor",
"log_sigmoid_backward_cpu",
"rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)",
"rrelu_with_noise_out_cpu",
"rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor",
"rrelu_with_noise_cpu",
"rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> Tensor",
"NO_NS::NO_FUNCTION",
"rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)",
"rrelu_with_noise_cpu_",
"softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)",
"softplus_out",
"softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor",
"softplus",
"softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)",
"softplus_backward_out",
"softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor",
"softplus_backward",
"softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)",
"softshrink_out",
"softshrink(Tensor self, Scalar lambd=0.5) -> Tensor",
"softshrink",
"softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)",
"softshrink_backward_out",
"softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor",
"softshrink_backward",
"adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)",
"adaptive_avg_pool2d_out_cpu",
"adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor",
"NO_NS::NO_FUNCTION",
"mkldnn_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor",
"adaptive_avg_pool2d_cpu",
"_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor",
"adaptive_avg_pool2d_backward_cpu",
"adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)",
"adaptive_avg_pool3d_out_cpu",
"adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor",
"NO_NS::NO_FUNCTION",
"_adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor",
"adaptive_avg_pool3d_cpu",
"adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)",
"adaptive_avg_pool3d_backward_out_cpu",
"_adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor",
"adaptive_avg_pool3d_backward_cpu",
"adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))",
"adaptive_max_pool2d_out_cpu",
"adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)",
"adaptive_max_pool2d_backward_out_cpu",
"adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor",
"NO_NS::NO_FUNCTION",
"adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))",
"adaptive_max_pool3d_out_cpu",
"adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)",
"adaptive_max_pool3d_backward_out_cpu",
"adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor",
"NO_NS::NO_FUNCTION",
"avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)",
"avg_pool2d_out_cpu",
"avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor",
"avg_pool2d_cpu",
"avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)",
"avg_pool2d_backward_out_cpu",
"avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor",
"avg_pool2d_backward_cpu",
"avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)",
"avg_pool3d_out_cpu",
"avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor",
"avg_pool3d_cpu",
"avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)",
"avg_pool3d_backward_out_cpu",
"avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor",
"avg_pool3d_backward_cpu",
"fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))",
"fractional_max_pool2d_out_cpu",
"fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)",
"fractional_max_pool2d_backward_out_cpu",
"fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor",
"fractional_max_pool2d_backward_cpu",
"fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))",
"fractional_max_pool3d_out_cpu",
"fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)",
"fractional_max_pool3d_cpu",
"fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)",
"fractional_max_pool3d_backward_out_cpu",
"fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor",
"fractional_max_pool3d_backward_cpu",
"max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))",
"max_pool2d_with_indices_out_cpu",
"max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)",
"NO_NS::NO_FUNCTION",
"max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)",
"max_pool2d_with_indices_backward_out_cpu",
"max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor",
"max_pool2d_with_indices_backward_cpu",
"max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))",
"max_pool3d_with_indices_out_cpu",
"max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)",
"max_pool3d_with_indices_cpu",
"max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)",
"max_pool3d_with_indices_backward_out_cpu",
"max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor",
"max_pool3d_with_indices_backward_cpu",
"max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)",
"max_unpooling2d_forward_out_cpu",
"max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor",
"max_unpooling2d_forward_cpu",
"max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)",
"max_unpooling2d_backward_out_cpu",
"max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor",
"max_unpooling2d_backward_cpu",
"max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)",
"max_unpooling3d_forward_out_cpu",
"max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor",
"max_unpooling3d_forward_cpu",
"max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)",
"max_unpooling3d_backward_out_cpu",
"max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor",
"max_unpooling3d_backward_cpu",
"reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)",
"reflection_pad1d_out_cpu",
"reflection_pad1d(Tensor self, int[2] padding) -> Tensor",
"NO_NS::NO_FUNCTION",
"reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)",
"reflection_pad1d_backward_out_cpu",
"reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor",
"reflection_pad1d_backward_cpu",
"reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)",
"reflection_pad2d_out_cpu",
"reflection_pad2d(Tensor self, int[4] padding) -> Tensor",
"reflection_pad2d_cpu",
"reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)",
"reflection_pad2d_backward_out_cpu",
"reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor",
"reflection_pad2d_backward_cpu",
"replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)",
"replication_pad1d_out_cpu",
"replication_pad1d(Tensor self, int[2] padding) -> Tensor",
"NO_NS::NO_FUNCTION",
"replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)",
"replication_pad1d_backward_out_cpu",
"replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor",
"NO_NS::NO_FUNCTION",
"replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)",
"replication_pad2d_out_cpu",
"replication_pad2d(Tensor self, int[4] padding) -> Tensor",
"NO_NS::NO_FUNCTION",
"replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)",
"replication_pad2d_backward_out_cpu",
"replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor",
"replication_pad2d_backward_cpu",
"replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)",
"replication_pad3d_out_cpu",
"replication_pad3d(Tensor self, int[6] padding) -> Tensor",
"NO_NS::NO_FUNCTION",
"replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)",
"replication_pad3d_backward_out_cpu",
"replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor",
"replication_pad3d_backward_cpu",
"upsample_linear1d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_linear1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_bilinear2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_bilinear2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_trilinear3d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_trilinear3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_bicubic2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_bicubic2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest1d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest2d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest3d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor",
"upsample_nearest3d_cpu",
"upsample_nearest3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor",
"upsample_nearest3d_backward_cpu",
"upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)",
"upsample_linear1d_out_cpu",
"upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)",
"upsample_linear1d_backward_out_cpu",
"upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)",
"upsample_bilinear2d_out_cpu",
"upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)",
"upsample_bilinear2d_backward_out_cpu",
"upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)",
"upsample_bicubic2d_out_cpu",
"upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)",
"upsample_bicubic2d_backward_out_cpu",
"upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)",
"upsample_trilinear3d_out_cpu",
"upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)",
"upsample_trilinear3d_backward_out_cpu",
"upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)",
"upsample_nearest1d_out_cpu",
"upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)",
"upsample_nearest1d_backward_out_cpu",
"upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)",
"upsample_nearest2d_out_cpu",
"upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)",
"upsample_nearest2d_backward_out_cpu",
"upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)",
"upsample_nearest3d_out_cpu",
"upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)",
"upsample_nearest3d_backward_out_cpu",
"upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)",
"sigmoid_backward_out",
"sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor",
"sigmoid_backward",
"logit_backward.grad_input(Tensor grad_output, Tensor self, float? eps=None, *, Tensor(a!) grad_input) -> Tensor(a!)",
"logit_backward_out",
"logit_backward(Tensor grad_output, Tensor self, float? eps=None) -> Tensor",
"logit_backward",
"tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)",
"tanh_backward_out",
"tanh_backward(Tensor grad_output, Tensor output) -> Tensor",
"tanh_backward",
"slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)",
"slow_conv_transpose2d_out_cpu",
"slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor",
"slow_conv_transpose2d_cpu",
"slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))",
"slow_conv_transpose2d_backward_out_cpu",
"slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)",
"slow_conv_transpose2d_backward_cpu",
"slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)",
"slow_conv_transpose3d_out_cpu",
"slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor",
"slow_conv_transpose3d_cpu",
"slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))",
"slow_conv_transpose3d_backward_out_cpu",
"slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)",
"slow_conv_transpose3d_backward_cpu",
"thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))",
"slow_conv2d_forward_out_cpu",
"thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)",
"slow_conv2d_forward_cpu",
"thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))",
"slow_conv2d_backward_out_cpu",
"thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)",
"slow_conv2d_backward_cpu",
"thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor",
"NO_NS::NO_FUNCTION",
"thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) grad_input, Tensor(b!) grad_weight) -> (Tensor(a!), Tensor(b!))",
"NO_NS::NO_FUNCTION",
"thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)",
"NO_NS::NO_FUNCTION",
"conv_depthwise3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, int[3] dilation) -> Tensor",
"NO_NS::NO_FUNCTION",
"conv_depthwise3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))",
"NO_NS::NO_FUNCTION",
"conv_depthwise3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)",
"NO_NS::NO_FUNCTION",
"slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor",
"NO_NS::NO_FUNCTION",
"slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))",
"slow_conv3d_forward_out_cpu",
"slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)",
"slow_conv3d_forward_cpu",
"slow_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))",
"slow_conv3d_backward_out_cpu",
"slow_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)",
"slow_conv3d_backward_cpu",
"slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor",
"slow_conv_dilated2d_cpu",
"slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)",
"slow_conv_dilated2d_backward_cpu",
"slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor",
"slow_conv_dilated3d_cpu",
"slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)",
"slow_conv_dilated3d_backward_cpu",
"col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)",
"col2im_out_cpu",
"col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor",
"col2im_cpu",
"col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)",
"col2im_backward_out_cpu",
"col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor",
"col2im_backward_cpu",
"column_stack(Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"column_stack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)",
"im2col_out_cpu",
"im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor",
"im2col_cpu",
"im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)",
"im2col_backward_out_cpu",
"im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor",
"im2col_backward_cpu",
"isfinite(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"isinf(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
// "record_stream(Tensor(a!) self, Stream s) -> ()",
// "NO_NS::NO_FUNCTION",
"isposinf(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"isposinf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"isposinf_out",
"isneginf(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"isneginf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"isneginf_out",
"_add_batch_dim(Tensor self, int batch_dim, int level) -> Tensor",
"NO_NS::NO_FUNCTION",
"_remove_batch_dim(Tensor self, int level, int batch_size, int out_dim) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_entr(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_entr.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"special_entr_out",
"special_expm1(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_exp2(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_exp2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_gammaln(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_gammaln.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_erf(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_erfc(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_erfinv(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_xlog1py(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_xlog1py.self_scalar(Scalar self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_xlog1py.other_scalar(Tensor self, Scalar other) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_xlog1py.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"special_xlog1py_out",
"special_xlog1py.self_scalar_out(Scalar self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_xlog1py.other_scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_i0e(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_i0e.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"special_i0e_out",
"special_logit(Tensor self, float? eps=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_logit.out(Tensor self, float? eps=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"special_expit(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"special_expit.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_fft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_fft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_ifft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_ifft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_rfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_rfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_irfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_irfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_hfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_hfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_ihfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_ihfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_fft2(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_fft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_ifft2(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_ifft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_rfft2(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_rfft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_irfft2(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_irfft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_fftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_fftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_ifftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_ifftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_rfftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_rfftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_irfftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_irfftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_fftfreq(int n, float d=1.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_fftfreq.out(int n, float d=1.0, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_rfftfreq(int n, float d=1.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_rfftfreq.out(int n, float d=1.0, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"fft_fftshift(Tensor self, int[1]? dim=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"fft_ifftshift(Tensor self, int[1]? dim=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_cholesky_ex(Tensor self, *, bool check_errors=False) -> (Tensor L, Tensor info)",
"linalg_cholesky_ex",
"linalg_cholesky_ex.L(Tensor self, *, bool check_errors=False, Tensor(a!) L, Tensor(b!) info) -> (Tensor(a!) L, Tensor(b!) info)",
"linalg_cholesky_ex_out",
"linalg_cholesky(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_cholesky.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_det(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_det.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"det(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_lstsq(Tensor self, Tensor b, float? rcond=None, *, str? driver=None) -> (Tensor solution, Tensor residuals, Tensor rank, Tensor singular_values)",
"NO_NS::NO_FUNCTION",
"linalg_lstsq.out(Tensor self, Tensor b, float? rcond=None, *, str? driver=None, Tensor(a!) solution, Tensor(b!) residuals, Tensor(c!) rank, Tensor(d!) singular_values) -> (Tensor(a!) solution, Tensor(b!) residuals, Tensor(c!) rank, Tensor(d!) singular_values)",
"linalg_lstsq_out",
"linalg_slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)",
"linalg_slogdet",
"linalg_slogdet.out(Tensor self, *, Tensor(a!) sign, Tensor(b!) logabsdet) -> (Tensor(a!) sign, Tensor(b!) logabsdet)",
"linalg_slogdet_out",
"linalg_eig(Tensor self) -> (Tensor eigenvalues, Tensor eigenvectors)",
"linalg_eig",
"linalg_eig.out(Tensor self, *, Tensor(a!) eigenvalues, Tensor(b!) eigenvectors) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)",
"linalg_eig_out",
"linalg_eigvals(Tensor self) -> Tensor",
"linalg_eigvals",
"linalg_eigvals.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"linalg_eigvals_out",
"linalg_eigh(Tensor self, str UPLO=\"L\") -> (Tensor eigenvalues, Tensor eigenvectors)",
"NO_NS::NO_FUNCTION",
"linalg_eigh.eigvals(Tensor self, str UPLO=\"L\", *, Tensor(a!) eigvals, Tensor(b!) eigvecs) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)",
"NO_NS::NO_FUNCTION",
"linalg_eigvalsh(Tensor self, str UPLO=\"L\") -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_eigvalsh.out(Tensor self, str UPLO='L', *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_householder_product(Tensor input, Tensor tau) -> Tensor",
"linalg_householder_product",
"linalg_householder_product.out(Tensor input, Tensor tau, *, Tensor(a!) out) -> Tensor(a!)",
"linalg_householder_product_out",
"_linalg_inv_out_helper_(Tensor(a!) self, Tensor(b!) infos_lu, Tensor(c!) infos_getri) -> Tensor(a!)",
"_linalg_inv_out_helper_cpu",
"linalg_inv(Tensor self) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_inv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"inner(Tensor self, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"inner.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"outer(Tensor self, Tensor vec2) -> Tensor",
"NO_NS::NO_FUNCTION",
"outer.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"ger(Tensor self, Tensor vec2) -> Tensor",
"NO_NS::NO_FUNCTION",
"ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_norm(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_norm.ord_str(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_norm.out(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_norm.ord_str_out(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_vector_norm(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"linalg_vector_norm",
"linalg_vector_norm.out(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"linalg_vector_norm_out",
"linalg_matrix_norm(Tensor self, Scalar ord, int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_matrix_norm.out(Tensor self, Scalar ord, int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_matrix_norm.str_ord(Tensor self, str ord='fro', int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_matrix_norm.str_ord_out(Tensor self, str ord='fro', int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_svd.U(Tensor self, bool full_matrices=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh)",
"NO_NS::NO_FUNCTION",
"linalg_svd(Tensor self, bool full_matrices=True) -> (Tensor U, Tensor S, Tensor Vh)",
"NO_NS::NO_FUNCTION",
"linalg_svdvals(Tensor input) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_svdvals.out(Tensor input, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_cond(Tensor self, Scalar? p=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_cond.out(Tensor self, Scalar? p=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_cond.p_str(Tensor self, str p) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_cond.p_str_out(Tensor self, str p, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_pinv(Tensor self, float rcond=1e-15, bool hermitian=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_pinv.rcond_tensor(Tensor self, Tensor rcond, bool hermitian=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_pinv.out(Tensor self, float rcond=1e-15, bool hermitian=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_pinv.out_rcond_tensor(Tensor self, Tensor rcond, bool hermitian=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_linalg_solve_out_helper_(Tensor(a!) self, Tensor(b!) other, Tensor(c!) infos) -> Tensor(a!)",
"_linalg_solve_out_helper_cpu",
"linalg_solve(Tensor input, Tensor other) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_solve.out(Tensor input, Tensor other, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_tensorinv(Tensor self, int ind=2) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_tensorinv.out(Tensor self, int ind=2, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_tensorsolve(Tensor self, Tensor other, int[]? dims=None) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_tensorsolve.out(Tensor self, Tensor other, int[]? dims=None, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_qr(Tensor self, str mode='reduced') -> (Tensor Q, Tensor R)",
"NO_NS::NO_FUNCTION",
"linalg_qr.out(Tensor self, str mode='reduced', *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)",
"NO_NS::NO_FUNCTION",
"_linalg_qr_helper(Tensor self, str mode) -> (Tensor, Tensor)",
"_linalg_qr_helper_default",
"linalg_matrix_power(Tensor self, int n) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_matrix_power.out(Tensor self, int n, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_matrix_rank(Tensor self, float? tol=None, bool hermitian=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_matrix_rank.out(Tensor self, float? tol=None, bool hermitian=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_matrix_rank.tol_tensor(Tensor input, Tensor tol, bool hermitian=False) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_matrix_rank.out_tol_tensor(Tensor input, Tensor tol, bool hermitian=False, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"linalg_multi_dot(Tensor[] tensors) -> Tensor",
"NO_NS::NO_FUNCTION",
"linalg_multi_dot.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)",
"NO_NS::NO_FUNCTION",
"_test_serialization_subcmul(Tensor self, Tensor other, Scalar alpha=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"_test_optional_intlist(Tensor values, int[]? addends) -> Tensor",
"_test_optional_intlist",
"_test_optional_filled_intlist(Tensor values, int[2]? addends) -> Tensor",
"_test_optional_intlist",
"_test_optional_floatlist(Tensor values, float[]? addends) -> Tensor",
"_test_optional_floatlist",
"_test_string_default(Tensor dummy, str a, str b) -> Tensor",
"NO_NS::NO_FUNCTION",
"_test_ambiguous_defaults.a(Tensor dummy, int a=1, int b=1) -> Tensor",
"NO_NS::NO_FUNCTION",
"_test_ambiguous_defaults.b(Tensor dummy, int a=2, str b=\"2\") -> Tensor",
"NO_NS::NO_FUNCTION",
"segment_reduce(Tensor data, str reduce, *, Tensor? lengths=None, Tensor? indices=None, int axis=0, bool unsafe=False, Scalar? initial=None) -> Tensor",
"segment_reduce_kernel",
"segment_reduce_backward(Tensor grad, Tensor output, Tensor data, *, Tensor? lengths=None) -> Tensor",
"segment_reduce_backward_kernel"};

} // namespace ultra
